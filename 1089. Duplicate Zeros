Given a fixed-length integer array arr, duplicate each occurrence of zero, shifting the remaining elements to the right.

Note that elements beyond the length of the original array are not written. Do the above modifications to the input array in place and do not return anything.

 

Example 1:

Input: arr = [1,0,2,3,0,4,5,0]
Output: [1,0,0,2,3,0,0,4]
Explanation: After calling your function, the input array is modified to: [1,0,0,2,3,0,0,4]
Example 2:

Input: arr = [1,2,3]
Output: [1,2,3]
Explanation: After calling your function, the input array is modified to: [1,2,3]
 

Constraints:

1 <= arr.length <= 104
0 <= arr[i] <= 9


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

APPROACH:: 
Create another array of size arr.length + number of zeroes in array
Start from the last, if element is non zero, copy as it is to new array.
If element is zero, copy it twice.

Because we cannot return any other array but the changes must be dont to the same array, copy elements from the new Array to the old one
till the size of old array. DONE

class Solution {
    public void duplicateZeros(int[] arr) {
      int count = 0;  
      for(int i = 0; i<arr.length; i++){
          if(arr[i]==0){
            count++;
          }
        }
      int[] newNums = new int[arr.length+count];
      int i = arr.length-1;
      int j = newNums.length-1;
      
      while(i>=0){
        if(arr[i]!=0){
          newNums[j] = arr[i];
          j--;
          i--;
        }else{
          newNums[j] = arr[i];
          j--;
          newNums[j] = arr[i];
          j--; i--;
        }
      }
      //Arrays.slice(newNums, count);
      for(int x = 0; x<arr.length; x++){
        arr[x] = newNums[x];
      }
    }
}
