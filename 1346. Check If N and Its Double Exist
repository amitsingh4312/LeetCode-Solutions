Given an array arr of integers, check if there exists two integers N and M such that N is the double of M ( i.e. N = 2 * M).

More formally check if there exists two indices i and j such that :

i != j
0 <= i, j < arr.length
arr[i] == 2 * arr[j]
 

Example 1:

Input: arr = [10,2,5,3]
Output: true
Explanation: N = 10 is the double of M = 5,that is, 10 = 2 * 5.
Example 2:

Input: arr = [7,1,14,11]
Output: true
Explanation: N = 14 is the double of M = 7,that is, 14 = 2 * 7.
Example 3:

Input: arr = [3,1,7,11]
Output: false
Explanation: In this case does not exist N and M, such that N = 2 * M.
 

Constraints:

2 <= arr.length <= 500
-10^3 <= arr[i] <= 10^3


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


class Solution {
    public boolean checkIfExist(int[] arr) {
      Arrays.sort(arr);
      int count = 0;
      ArrayList<Integer> aList = new ArrayList<>();
      
      for(int i = arr.length-1; i>=0; i--){
        if(arr[i]%2==0){
          aList.add(arr[i]);
        }
      }
      for(int i = 0; i<arr.length; i++){
        if(aList.contains(arr[i]*2) && arr[i]!=0){
          System.out.print(arr[i]);
          return true;
        }
      }
      for(int i = 0; i<aList.size(); i++){
        if(aList.get(i)==0){
          count++;
        }
      }
      if(count>1){
        return true;
      }
      return false;
    }
}
