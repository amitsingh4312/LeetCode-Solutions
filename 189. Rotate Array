Given an array, rotate the array to the right by k steps, where k is non-negative.

 

Example 1:

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
Example 2:

Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]
 

Constraints:

1 <= nums.length <= 105
-231 <= nums[i] <= 231 - 1
0 <= k <= 105
 

Follow up:

Try to come up with as many solutions as you can. There are at least three different ways to solve this problem.
Could you do it in-place with O(1) extra space?


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Amazing question! Solved it with the below approach, but stuck with Time Limit Exceeding issue. Its O(n), must be O(1):

class Solution {
    
    public int[] sideShift(int[] a){
        int temp = a[a.length-1];
        for(int i = a.length-1; i>0; i--){
            a[i] = a[i-1];
        }
        a[0] = temp;
        for(int i = 0; i<a.length; i++){ 
        }
        return a;
    }
    
    public void rotate(int[] nums, int k) {
        k = k % nums.length;
        System.out.println(k);
        while(k>0){
            sideShift(nums);
            k--;
        }
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Came up with a second approach, where if the shifting is less than half of the length of array, it would do the same as above, else it will subtract k from array length
and do the right shift. The answer is again correct but time limit excedds ughhhhhhh

class Solution {
    
    public int[] sideShift(int[] a){
        int temp = a[a.length-1];
        for(int i = a.length-1; i>0; i--){
            a[i] = a[i-1];
        }
        a[0] = temp;
        for(int i = 0; i<a.length; i++){ 
        }
        return a;
    }
    public int[] sideShiftr(int[] a){
        int temp = a[0];
        for(int i = 0; i<a.length-1; i++){
            a[i] = a[i+1];
        }
        a[a.length-1] = temp;
        for(int i = 0; i<a.length; i++){ 
        }
        return a;
    }
    
    public void rotate(int[] nums, int k) {
        k = k % nums.length;
        if(k<=nums.length/2){
            //System.out.println(k);
            while(k>0){
            sideShift(nums);
            k--;
            }
        }else{
            k = nums.length -k;
            while(k>0){
            sideShiftr(nums);
            k--;
            }
        }
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


