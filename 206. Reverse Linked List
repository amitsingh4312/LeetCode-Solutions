Given the head of a singly linked list, reverse the list, and return the reversed list.

 

Example 1:


Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]
Example 2:


Input: head = [1,2]
Output: [2,1]
Example 3:

Input: head = []
Output: []
 

Constraints:

The number of nodes in the list is the range [0, 5000].
-5000 <= Node.val <= 5000
 

Follow up: A linked list can be reversed either iteratively or recursively. Could you implement both?


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Used 3 pointers to play around with the nodes and changing the .next's of all one by one. Try it with pen and paper, you will understand automatically


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {
        if(head==null || head.next == null){
            return head;
        }
        
        ListNode temp = head;
        ListNode pointer1 = null;
        ListNode pointer2 = null;
        
        while(temp!=null){
            pointer2 = pointer1;
            pointer1 = temp;
            temp = temp.next;
            pointer1.next = pointer2;
        }
        return pointer1;
    }
}
