Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.

 

Example 1:


Input: l1 = [1,2,4], l2 = [1,3,4]
Output: [1,1,2,3,4,4]
Example 2:

Input: l1 = [], l2 = []
Output: []
Example 3:

Input: l1 = [], l2 = [0]
Output: [0]
 

Constraints:

The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both l1 and l2 are sorted in non-decreasing order.


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Used 2 pointers approach in a while loop and insert in a new linked list..

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if(l1==null && l2 == null){return null;}
        if(l1==null){return l2;}
        if(l2==null){return l1;}
        
        ListNode head = new ListNode();
        
        if(l1.val<=l2.val){
            head = l1;
            l1 = l1.next;
        }else{
            head = l2;
            l2 = l2.next;
        }
        //System.out.print(l1.val);
        //System.out.print(l2.val);
        ListNode abc = head;
        
        while(l1!=null && l2!= null){
            System.out.print("hiii");
            if(l1.val<=l2.val){
                head.next = l1;
                l1 = l1.next;
            }else{
                head.next = l2;
                l2 = l2.next;
            }
            head = head.next;
        }
        
            if(l1 == null){
                head.next = l2;
                System.out.print(head.next.val);    
            }else if(l2 == null){
                head.next = l1;
                System.out.print(head.next.val);
            }
        return abc;
    }
}

