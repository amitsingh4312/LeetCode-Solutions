Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.

 

Example 1:

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
Example 2:

Input: nums = [0]
Output: [0]
 

Constraints:

1 <= nums.length <= 104
-231 <= nums[i] <= 231 - 1

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


I followed one approach but time limit exceeds. I sorted the array and then shifted the array left by number of zeroes. 

class Solution {
    
    public int[] sideShift(int[] a){
        int temp = a[0];
        for(int i = 0; i<a.length-1; i++){
            a[i] = a[i+1];
        }
        a[a.length-1] = temp;
        for(int i = 0; i<a.length; i++){ 
        }
        return a;
    }
 
    public void moveZeroes(int[] nums) {
        Arrays.sort(nums);
        int i = 0;
        while(nums[i]==0 && i<nums.length){
            sideShift(nums);            
        }
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Just realized that the above approach is incorrect as the rest of the elements must be in the same order, not sorted.. It would be more fun yayyyyy


class Solution {
    
    public void moveZeroes(int[] nums) {
        int i = 0;
        int j = 1;
        
        while(j<nums.length && i<nums.length){
            if(nums[i]==0){
                if(nums[j]!=0){
                    nums[i]=nums[j];
                    nums[j] = 0;
                    i++;
                    j++;
                }else{
                    j++;
                }
            }else{
                i++;
                j++;
            }
        }
    }
}


Used 2 pointer approach.


