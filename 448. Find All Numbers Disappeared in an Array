Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.

 

Example 1:

Input: nums = [4,3,2,7,8,2,3,1]
Output: [5,6]
Example 2:

Input: nums = [1,1]
Output: [2]
 

Constraints:

n == nums.length
1 <= n <= 105
1 <= nums[i] <= n
 

Follow up: Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.

Accepted
434,570
Submissions
760,168

==============================================================================================================================================================================


APPROACH: Place elements on their respective indexes. The ones with the value 0 are missing

class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        ArrayList<Integer> arr1 = new ArrayList<>();
        int[] nums1 = new int[nums.length];
        for(int i = 0; i<nums.length; i++){
            int temp = nums[i];
            nums1[temp-1] = temp;
        }
        
        for(int i = 0; i<nums1.length; i++){
            if(nums1[i]==0){
                arr1.add(i+1);
            }
            System.out.print(nums1[i]);
        }
        return arr1;
    }
}
