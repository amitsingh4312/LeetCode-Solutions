Given the root of a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.

 

Example 1:


Input: root = [5,3,6,2,4,null,8,1,null,null,null,7,9]
Output: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]
Example 2:


Input: root = [5,1,7]
Output: [1,null,5,null,7]
 

Constraints:

The number of nodes in the given tree will be in the range [1, 100].
0 <= Node.val <= 1000


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

GRAPH QUESTIONS ARE ALWAYS nice if you are finally able to solve them...
It lookes like a medium level question to me, however leetcode puts it in the easy category, so I believe I need to work on my graph DS

APPROACH: Stored inorder node values in an arraylist and then displayed them in the required format... Took me some time to fiddle around... Not some time actually

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    ArrayList<Integer> t = new ArrayList<Integer>();
    public TreeNode increasingBST(TreeNode root) {
        if(root==null){return null;}
        inorder(root);
        int i = 1;
        TreeNode nt = new TreeNode(t.get(0));
        TreeNode ntCopy = nt;
        
        while(i<t.size()){
            ntCopy.right = new TreeNode(t.get(i));
            //curr.left = null;
            ntCopy = ntCopy.right;
            i++;
            System.out.print(i);
        }
        return nt;
    }
    
    public void inorder(TreeNode node){
        if(node == null){
            return;
        }
        inorder(node.left);
        t.add(node.val);
        inorder(node.right);
    }
}
