Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
Example 3:

Input: nums1 = [0,0], nums2 = [0,0]
Output: 0.00000
Example 4:

Input: nums1 = [], nums2 = [1]
Output: 1.00000
Example 5:

Input: nums1 = [2], nums2 = []
Output: 2.00000
 

Constraints:

nums1.length == m
nums2.length == n
0 <= m <= 1000
0 <= n <= 1000
1 <= m + n <= 2000
-106 <= nums1[i], nums2[i] <= 106


--------------------------------------------------------------------------------------------------------------------------------------------------------------------

Fierst part of making up a new array could be optimized by using insertion sort,

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
      int[] newInt = new int[nums1.length + nums2.length];
      
      for(int i = 0; i<nums1.length; i++){
        newInt[i] = nums1[i];
      }
      for(int i = nums1.length; i<newInt.length; i++){
         newInt[i] = nums2[i-nums1.length];
        //newInt[i] = 0;
      }
      
      
      Arrays.sort(newInt);
      
      System.out.print(newInt[(newInt.length-1)/2]+" "+newInt[(newInt.length)/2]);
      
      if(newInt.length%2==1){
        return newInt[(newInt.length-1)/2];
      }else{
        double x = (double)newInt[(newInt.length-1)/2];
        double y = (double)newInt[(newInt.length)/2];
        
        double d = ((x+y)/2);
        return d;
        //return ((newInt[(newInt.length-1)/2] + newInt[(newInt.length)/2])/2);
      }
      // return 0;
    }
}
