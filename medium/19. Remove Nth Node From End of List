Given the head of a linked list, remove the nth node from the end of the list and return its head.

 

Example 1:


Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Example 2:

Input: head = [1], n = 1
Output: []
Example 3:

Input: head = [1,2], n = 1
Output: [1]
 

Constraints:

The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz
 

Follow up: Could you do this in one pass?


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Medium Leetcode Question.
Solved it using 2 pointers approach. One pointer will be delayed by n steps from other. when first pointer reaches n, initialize second pointer. when first pointer reaches null, 
delete current node of first pointer. Take care of corner cases(n = length of linkedlist, then you need to remove head).


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode p1 = head;
        ListNode p2 = head;
        
        if(head.next == null && n>0){
            return null;
        }
        
        for(int i = 1; i<=n; i++){
            if(p2.next == null){
            //     p1.next = p1.next.next;
            head = head.next;
                return head;
            }else{
                p2 = p2.next; 
            }
        }
        
        while(p2.next!=null){
            p2 = p2.next;
            p1 = p1.next;
        }
        System.out.print(p1);
        p1.next = p1.next.next;
        return head;
    }
}
